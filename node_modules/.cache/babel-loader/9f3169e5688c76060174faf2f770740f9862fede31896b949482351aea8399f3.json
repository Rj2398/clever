{"ast":null,"code":"var _jsxFileName = \"/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js\",\n  _s2 = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// // Your backend server URL.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // Checks if the current URL is a Clever callback\n//   const isCleverCallback = () => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     return urlParams.has(\"code\");\n//   };\n\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ code }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log(\n//               \"Access token received from backend:\",\n//               data.accessToken\n//             );\n//             setIsLoggedIn(true);\n//             setTokenData(data);\n//             window.history.pushState({}, \"\", \"/\");\n//           })\n//           .catch((error) => {\n//             console.error(\"Error exchanging code:\", error);\n//           });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on whether the URL contains a callback code\n//   if (isCleverCallback()) {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n//\n\n// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// //\n\n//\n// code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n///13-08-2025\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// // This URL is where your Node.js backend will be running.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n//       const state = urlParams.get(\"state\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//         //   method: \"POST\",\n//         //   headers: { \"Content-Type\": \"application/json\" },\n//         //   body: JSON.stringify({ code }),\n//         // })\n//         //   .then((response) => response.json())\n//         //   .then((data) => {\n//         //     console.log(\n//         //       \"Access token received from backend:\",\n//         //       data.accessToken\n//         //     );\n//         //     setIsLoggedIn(true);\n//         //     setTokenData(data);\n//         //     // Optional: Redirect the user away from the callback URL\n//         //     window.history.pushState({}, \"\", \"/\");\n//         //   })\n//         //   .catch((error) => {\n//         //     console.error(\"Error exchanging code:\", error);\n//         //   });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLEVER_CLIENT_ID,\n//       scope: \"read:students\", // Adjust the scope as needed\n//       state: Math.random().toString(36).substring(2, 15), // A simple state value for demo\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === \"/clever/callback\") {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n// import React, { useEffect, useState } from \"react\";\n\n// // Use the client ID from your dashboard.\n// const YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n\n// // WARNING: This redirect URI must be an exact match to what is in your Clever dashboard.\n// // If your dashboard is set to \"http://localhost:3000/clever/callback\", this will fail.\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// function App() {\n//   const [authCode, setAuthCode] = useState(null);\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n\n//     if (code) {\n//       console.log(\"Received authorization code:\", code);\n//       setAuthCode(code);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   if (authCode) {\n//     return (\n//       <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//         <h2>Successfully received authorization code!</h2>\n//         <p>\n//           Your authorization code is: <code>{authCode}</code>\n//         </p>\n//         <p>\n//           This code must now be sent to a **secure backend** to get an access\n//           token. Without a backend, you cannot complete the login process or\n//           access Clever's data.\n//         </p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Redirect Example</h1>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//19-08\n\nimport React, { useEffect, useState } from \"react\";\n\n// YOUR CLEVER APPLICATION DETAILS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\nconst YOUR_REDIRECT_URI = \"http://localhost:3000\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [isCleverLoggedIn, setIsCleverLoggedIn] = useState(false);\n  const [cleverAuthCode, setCleverAuthCode] = useState(null);\n\n  // Checks if the URL has the 'code' parameter from Clever's redirect\n  const isCleverCallback = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.has(\"code\");\n  };\n  const CleverCallback = () => {\n    _s();\n    useEffect(() => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n      if (code) {\n        // Here, the frontend successfully receives the authorization code.\n        // You cannot proceed with the token exchange from here securely.\n        console.log(\"SUCCESS! Received authorization code:\", code);\n        setIsCleverLoggedIn(true);\n        setCleverAuthCode(code);\n\n        // Clean the URL to remove the code parameter\n        window.history.pushState({}, \"\", \"/\");\n      }\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Processing Clever login...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 12\n    }, this);\n  };\n  _s(CleverCallback, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const handleLogin = () => {\n    // This is the direct URL for your specific district's login portal\n    const districtId = \"62bca20e8aae1a2c343212b2\";\n    const cleverAuthUrl = `https://clever.com/oauth/authorize?district_id=${districtId}`;\n    const params = new URLSearchParams({\n      response_type: \"code\",\n      redirect_uri: YOUR_REDIRECT_URI,\n      client_id: YOUR_CLIENT_ID,\n      scope: \"read:students\",\n      state: Math.random().toString(36).substring(2, 15)\n    });\n\n    // Redirect to the district-specific URL\n    window.location.href = `${cleverAuthUrl}&${params.toString()}`;\n  };\n\n  // Conditional rendering based on whether the URL contains a callback code\n  if (isCleverCallback()) {\n    return /*#__PURE__*/_jsxDEV(CleverCallback, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Clever Frontend Login Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), !isCleverLoggedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Clever\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Successfully logged in to Clever!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This frontend app has received the authorization code from Clever.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"**Note:** The next step is to send this code to a secure backend server to exchange it for an access token and user data. This frontend-only example cannot perform that step.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The received authorization code is: **\", cleverAuthCode, \"**\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"UUuPaAxTGORWNBEEctaaZCzY/Jg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","YOUR_CLIENT_ID","YOUR_REDIRECT_URI","App","_s2","_s","$RefreshSig$","isCleverLoggedIn","setIsCleverLoggedIn","cleverAuthCode","setCleverAuthCode","isCleverCallback","urlParams","URLSearchParams","window","location","search","has","CleverCallback","code","get","console","log","history","pushState","children","fileName","_jsxFileName","lineNumber","columnNumber","handleLogin","districtId","cleverAuthUrl","params","response_type","redirect_uri","client_id","scope","state","Math","random","toString","substring","href","style","padding","fontFamily","onClick","_c","$RefreshReg$"],"sources":["/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// // Your backend server URL.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // Checks if the current URL is a Clever callback\n//   const isCleverCallback = () => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     return urlParams.has(\"code\");\n//   };\n\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ code }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log(\n//               \"Access token received from backend:\",\n//               data.accessToken\n//             );\n//             setIsLoggedIn(true);\n//             setTokenData(data);\n//             window.history.pushState({}, \"\", \"/\");\n//           })\n//           .catch((error) => {\n//             console.error(\"Error exchanging code:\", error);\n//           });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on whether the URL contains a callback code\n//   if (isCleverCallback()) {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n//\n\n// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// //\n\n//\n// code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n///13-08-2025\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// // This URL is where your Node.js backend will be running.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n//       const state = urlParams.get(\"state\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//         //   method: \"POST\",\n//         //   headers: { \"Content-Type\": \"application/json\" },\n//         //   body: JSON.stringify({ code }),\n//         // })\n//         //   .then((response) => response.json())\n//         //   .then((data) => {\n//         //     console.log(\n//         //       \"Access token received from backend:\",\n//         //       data.accessToken\n//         //     );\n//         //     setIsLoggedIn(true);\n//         //     setTokenData(data);\n//         //     // Optional: Redirect the user away from the callback URL\n//         //     window.history.pushState({}, \"\", \"/\");\n//         //   })\n//         //   .catch((error) => {\n//         //     console.error(\"Error exchanging code:\", error);\n//         //   });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLEVER_CLIENT_ID,\n//       scope: \"read:students\", // Adjust the scope as needed\n//       state: Math.random().toString(36).substring(2, 15), // A simple state value for demo\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === \"/clever/callback\") {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n// import React, { useEffect, useState } from \"react\";\n\n// // Use the client ID from your dashboard.\n// const YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n\n// // WARNING: This redirect URI must be an exact match to what is in your Clever dashboard.\n// // If your dashboard is set to \"http://localhost:3000/clever/callback\", this will fail.\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// function App() {\n//   const [authCode, setAuthCode] = useState(null);\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n\n//     if (code) {\n//       console.log(\"Received authorization code:\", code);\n//       setAuthCode(code);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   if (authCode) {\n//     return (\n//       <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//         <h2>Successfully received authorization code!</h2>\n//         <p>\n//           Your authorization code is: <code>{authCode}</code>\n//         </p>\n//         <p>\n//           This code must now be sent to a **secure backend** to get an access\n//           token. Without a backend, you cannot complete the login process or\n//           access Clever's data.\n//         </p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Redirect Example</h1>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//19-08\n\nimport React, { useEffect, useState } from \"react\";\n\n// YOUR CLEVER APPLICATION DETAILS\nconst YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\nconst YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\nfunction App() {\n  const [isCleverLoggedIn, setIsCleverLoggedIn] = useState(false);\n  const [cleverAuthCode, setCleverAuthCode] = useState(null);\n\n  // Checks if the URL has the 'code' parameter from Clever's redirect\n  const isCleverCallback = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.has(\"code\");\n  };\n\n  const CleverCallback = () => {\n    useEffect(() => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n\n      if (code) {\n        // Here, the frontend successfully receives the authorization code.\n        // You cannot proceed with the token exchange from here securely.\n        console.log(\"SUCCESS! Received authorization code:\", code);\n\n        setIsCleverLoggedIn(true);\n        setCleverAuthCode(code);\n\n        // Clean the URL to remove the code parameter\n        window.history.pushState({}, \"\", \"/\");\n      }\n    }, []);\n\n    return <div>Processing Clever login...</div>;\n  };\n\n  const handleLogin = () => {\n    // This is the direct URL for your specific district's login portal\n    const districtId = \"62bca20e8aae1a2c343212b2\";\n    const cleverAuthUrl = `https://clever.com/oauth/authorize?district_id=${districtId}`;\n\n    const params = new URLSearchParams({\n      response_type: \"code\",\n      redirect_uri: YOUR_REDIRECT_URI,\n      client_id: YOUR_CLIENT_ID,\n      scope: \"read:students\",\n      state: Math.random().toString(36).substring(2, 15),\n    });\n\n    // Redirect to the district-specific URL\n    window.location.href = `${cleverAuthUrl}&${params.toString()}`;\n  };\n\n  // Conditional rendering based on whether the URL contains a callback code\n  if (isCleverCallback()) {\n    return <CleverCallback />;\n  }\n\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n      <h1>Clever Frontend Login Example</h1>\n      {!isCleverLoggedIn ? (\n        <button onClick={handleLogin}>Login with Clever</button>\n      ) : (\n        <div>\n          <h2>Successfully logged in to Clever!</h2>\n          <p>\n            This frontend app has received the authorization code from Clever.\n          </p>\n          <p>\n            **Note:** The next step is to send this code to a secure backend\n            server to exchange it for an access token and user data. This\n            frontend-only example cannot perform that step.\n          </p>\n          <p>The received authorization code is: **{cleverAuthCode}**</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
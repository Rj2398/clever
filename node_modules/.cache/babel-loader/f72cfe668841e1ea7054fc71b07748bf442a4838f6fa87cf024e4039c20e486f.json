{"ast":null,"code":"var _jsxFileName = \"/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// //\n\n//\n// code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n///13-08-2025\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// // This URL is where your Node.js backend will be running.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n//       const state = urlParams.get(\"state\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//         //   method: \"POST\",\n//         //   headers: { \"Content-Type\": \"application/json\" },\n//         //   body: JSON.stringify({ code }),\n//         // })\n//         //   .then((response) => response.json())\n//         //   .then((data) => {\n//         //     console.log(\n//         //       \"Access token received from backend:\",\n//         //       data.accessToken\n//         //     );\n//         //     setIsLoggedIn(true);\n//         //     setTokenData(data);\n//         //     // Optional: Redirect the user away from the callback URL\n//         //     window.history.pushState({}, \"\", \"/\");\n//         //   })\n//         //   .catch((error) => {\n//         //     console.error(\"Error exchanging code:\", error);\n//         //   });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLEVER_CLIENT_ID,\n//       scope: \"read:students\", // Adjust the scope as needed\n//       state: Math.random().toString(36).substring(2, 15), // A simple state value for demo\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === \"/clever/callback\") {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useEffect, useState } from 'react';\n\n// const YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\"; // Corrected URL\n\n// // Your backend server URL.\n// const YOUR_BACKEND_URL = 'http://localhost:5000';\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get('code');\n//       const state = urlParams.get('state');\n\n//       if (code) {\n//         console.log('Received authorization code:', code);\n//         // Step 2: Send the code to your backend for token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify({ code }),\n//         })\n//         .then(response => response.json())\n//         .then(data => {\n//           console.log('Access token received from backend:', data.accessToken);\n//           setIsLoggedIn(true);\n//           setTokenData(data);\n//           // Optional: Redirect the user away from the callback URL\n//           window.history.pushState({}, '', '/');\n//         })\n//         .catch(error => {\n//           console.error('Error exchanging code:', error);\n//         });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = 'https://clever.com/oauth/authorize';\n//     const params = new URLSearchParams({\n//       response_type: 'code',\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: 'read:students',\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === '/clever/callback') {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: '20px', fontFamily: 'sans-serif' }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;//\n\n//\nimport React, { useEffect, useState } from \"react\";\n\n// Use the client ID from your dashboard.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n\n// WARNING: This redirect URI must be an exact match to what is in your Clever dashboard.\n// If your dashboard is set to \"http://localhost:3000/clever/callback\", this will fail.\nconst YOUR_REDIRECT_URI = \"http://localhost:3000\";\nfunction App() {\n  _s();\n  const [authCode, setAuthCode] = useState(null);\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n    if (code) {\n      console.log(\"Received authorization code:\", code);\n      setAuthCode(code);\n    }\n  }, []);\n  const handleLogin = () => {\n    const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n    const params = new URLSearchParams({\n      response_type: \"code\",\n      redirect_uri: YOUR_REDIRECT_URI,\n      client_id: YOUR_CLIENT_ID,\n      scope: \"read:students\",\n      state: Math.random().toString(36).substring(2, 15)\n    });\n    window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n  };\n  if (authCode) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"20px\",\n        fontFamily: \"sans-serif\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Successfully received authorization code!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your authorization code is: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: authCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This code must now be sent to a **secure backend** to get an access token. Without a backend, you cannot complete the login process or access Clever's data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Clever Login Redirect Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Clever\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"okVlqhdL6dyvW4dY7jEApziw+6s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","YOUR_CLIENT_ID","YOUR_REDIRECT_URI","App","_s","authCode","setAuthCode","urlParams","URLSearchParams","window","location","search","code","get","console","log","handleLogin","cleverAuthUrl","params","response_type","redirect_uri","client_id","scope","state","Math","random","toString","substring","href","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// //\n\n//\n// code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n///13-08-2025\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// // This URL is where your Node.js backend will be running.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n//       const state = urlParams.get(\"state\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//         //   method: \"POST\",\n//         //   headers: { \"Content-Type\": \"application/json\" },\n//         //   body: JSON.stringify({ code }),\n//         // })\n//         //   .then((response) => response.json())\n//         //   .then((data) => {\n//         //     console.log(\n//         //       \"Access token received from backend:\",\n//         //       data.accessToken\n//         //     );\n//         //     setIsLoggedIn(true);\n//         //     setTokenData(data);\n//         //     // Optional: Redirect the user away from the callback URL\n//         //     window.history.pushState({}, \"\", \"/\");\n//         //   })\n//         //   .catch((error) => {\n//         //     console.error(\"Error exchanging code:\", error);\n//         //   });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLEVER_CLIENT_ID,\n//       scope: \"read:students\", // Adjust the scope as needed\n//       state: Math.random().toString(36).substring(2, 15), // A simple state value for demo\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === \"/clever/callback\") {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useEffect, useState } from 'react';\n\n// const YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\"; // Corrected URL\n\n// // Your backend server URL.\n// const YOUR_BACKEND_URL = 'http://localhost:5000';\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get('code');\n//       const state = urlParams.get('state');\n\n//       if (code) {\n//         console.log('Received authorization code:', code);\n//         // Step 2: Send the code to your backend for token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify({ code }),\n//         })\n//         .then(response => response.json())\n//         .then(data => {\n//           console.log('Access token received from backend:', data.accessToken);\n//           setIsLoggedIn(true);\n//           setTokenData(data);\n//           // Optional: Redirect the user away from the callback URL\n//           window.history.pushState({}, '', '/');\n//         })\n//         .catch(error => {\n//           console.error('Error exchanging code:', error);\n//         });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = 'https://clever.com/oauth/authorize';\n//     const params = new URLSearchParams({\n//       response_type: 'code',\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: 'read:students',\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === '/clever/callback') {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: '20px', fontFamily: 'sans-serif' }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;//\n\n//\nimport React, { useEffect, useState } from \"react\";\n\n// Use the client ID from your dashboard.\nconst YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n\n// WARNING: This redirect URI must be an exact match to what is in your Clever dashboard.\n// If your dashboard is set to \"http://localhost:3000/clever/callback\", this will fail.\nconst YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\nfunction App() {\n  const [authCode, setAuthCode] = useState(null);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n\n    if (code) {\n      console.log(\"Received authorization code:\", code);\n      setAuthCode(code);\n    }\n  }, []);\n\n  const handleLogin = () => {\n    const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n    const params = new URLSearchParams({\n      response_type: \"code\",\n      redirect_uri: YOUR_REDIRECT_URI,\n      client_id: YOUR_CLIENT_ID,\n      scope: \"read:students\",\n      state: Math.random().toString(36).substring(2, 15),\n    });\n    window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n  };\n\n  if (authCode) {\n    return (\n      <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n        <h2>Successfully received authorization code!</h2>\n        <p>\n          Your authorization code is: <code>{authCode}</code>\n        </p>\n        <p>\n          This code must now be sent to a **secure backend** to get an access\n          token. Without a backend, you cannot complete the login process or\n          access Clever's data.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n      <h1>Clever Login Redirect Example</h1>\n      <button onClick={handleLogin}>Login with Clever</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// // Your backend server URL.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // Checks if the current URL is a Clever callback\n//   const isCleverCallback = () => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     return urlParams.has(\"code\");\n//   };\n\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ code }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log(\n//               \"Access token received from backend:\",\n//               data.accessToken\n//             );\n//             setIsLoggedIn(true);\n//             setTokenData(data);\n//             window.history.pushState({}, \"\", \"/\");\n//           })\n//           .catch((error) => {\n//             console.error(\"Error exchanging code:\", error);\n//           });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on whether the URL contains a callback code\n//   if (isCleverCallback()) {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n//\n\n// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// //\n\n//\n// code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n///13-08-2025\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// // This URL is where your Node.js backend will be running.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n//       const state = urlParams.get(\"state\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//         //   method: \"POST\",\n//         //   headers: { \"Content-Type\": \"application/json\" },\n//         //   body: JSON.stringify({ code }),\n//         // })\n//         //   .then((response) => response.json())\n//         //   .then((data) => {\n//         //     console.log(\n//         //       \"Access token received from backend:\",\n//         //       data.accessToken\n//         //     );\n//         //     setIsLoggedIn(true);\n//         //     setTokenData(data);\n//         //     // Optional: Redirect the user away from the callback URL\n//         //     window.history.pushState({}, \"\", \"/\");\n//         //   })\n//         //   .catch((error) => {\n//         //     console.error(\"Error exchanging code:\", error);\n//         //   });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLEVER_CLIENT_ID,\n//       scope: \"read:students\", // Adjust the scope as needed\n//       state: Math.random().toString(36).substring(2, 15), // A simple state value for demo\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === \"/clever/callback\") {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n// import React, { useEffect, useState } from \"react\";\n\n// // Use the client ID from your dashboard.\n// const YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n\n// // WARNING: This redirect URI must be an exact match to what is in your Clever dashboard.\n// // If your dashboard is set to \"http://localhost:3000/clever/callback\", this will fail.\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// function App() {\n//   const [authCode, setAuthCode] = useState(null);\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n\n//     if (code) {\n//       console.log(\"Received authorization code:\", code);\n//       setAuthCode(code);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   if (authCode) {\n//     return (\n//       <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//         <h2>Successfully received authorization code!</h2>\n//         <p>\n//           Your authorization code is: <code>{authCode}</code>\n//         </p>\n//         <p>\n//           This code must now be sent to a **secure backend** to get an access\n//           token. Without a backend, you cannot complete the login process or\n//           access Clever's data.\n//         </p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Redirect Example</h1>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n\n// data- 19-08-2025\n\n// import React, { useEffect, useState } from \"react\";\n\n// // YOUR CLEVER APPLICATION DETAILS\n// // Note: These are public facing and safe to keep in the front-end\n// const YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// // YOUR BACKEND SERVER URL\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userData, setUserData] = useState(null);\n\n//   // Checks if the URL has the 'code' parameter from Clever's redirect\n//   const isCleverCallback = () => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     return urlParams.has(\"code\");\n//   };\n\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for a secure token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ code }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log(\"User data received from backend:\", data);\n//             setIsLoggedIn(true);\n//             setUserData(data);\n//             // Clean the URL to remove the code parameter\n//             window.history.pushState({}, \"\", \"/\");\n//           })\n//           .catch((error) => {\n//             console.error(\"Error exchanging code:\", error);\n//           });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   const handleLogin = () => {\n//     // This URL will redirect the user to your district's specific login page\n//     // window.location.href = \"https://clever.com/in/placid-calculator-8114\";\n//     // window.location.href = \"https://clever.com/in/fabulous-protractor-6282\";\n//     window.location.href =\n//       \"https://clever.com/oauth/authorize?response_type=code&redirect_uri=http://localhost:3000&client_id=14b03a5dcb58a775e19c\";\n//   };\n\n//   // Conditional rendering based on whether the URL contains a callback code\n//   if (isCleverCallback()) {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(userData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n\n// 62bca20aeae1a2c3432128b2\n\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const clientId = \"745ce0e4a98fe44a0b1e\"; // your Clever client ID\n  const redirectUri = \"http://localhost:3000\"; // must match Clever dashboard\n  const backendApi = \"http://localhost:8000/api/auth/clever\";\n  // 👆 change to production API when Laravel is deployed\n\n  const handleLogin = () => {\n    // Standard OAuth login URL (credential login)\n    window.location.href = `https://clever.com/oauth/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}`;\n  };\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get(\"code\");\n    if (code) {\n      console.log(\"Clever returned code:\", code);\n\n      // Send code to backend\n      fetch(backendApi, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          code\n        })\n      }).then(res => res.json()).then(data => {\n        console.log(\"Backend response:\", data);\n        if (data.user) {\n          alert(`Logged in as: ${JSON.stringify(data.user.data)}`);\n        }\n      }).catch(err => console.error(\"Error sending code to backend:\", err));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-screen bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-10 rounded-3xl shadow-2xl flex flex-col items-center space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-gray-800\",\n        children: \"Welcome to My App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center\",\n        children: \"Sign in with your Clever account to continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        className: \"bg-blue-600 text-white px-8 py-3 rounded-full shadow-md hover:bg-blue-700 hover:scale-105 transition transform duration-200 ease-in-out flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          fill: \"white\",\n          viewBox: \"0 0 24 24\",\n          strokeWidth: 1.5,\n          stroke: \"currentColor\",\n          className: \"w-6 h-6\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            d: \"M12 6v12m6-6H6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Login with Clever\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 502,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","App","_s","clientId","redirectUri","backendApi","handleLogin","window","location","href","params","URLSearchParams","search","code","get","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","data","user","alert","catch","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","_c","$RefreshReg$"],"sources":["/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// // Your backend server URL.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // Checks if the current URL is a Clever callback\n//   const isCleverCallback = () => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     return urlParams.has(\"code\");\n//   };\n\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ code }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log(\n//               \"Access token received from backend:\",\n//               data.accessToken\n//             );\n//             setIsLoggedIn(true);\n//             setTokenData(data);\n//             window.history.pushState({}, \"\", \"/\");\n//           })\n//           .catch((error) => {\n//             console.error(\"Error exchanging code:\", error);\n//           });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on whether the URL contains a callback code\n//   if (isCleverCallback()) {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n//\n\n// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// //\n\n//\n// code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n///13-08-2025\n// import React, { useEffect, useState } from \"react\";\n\n// const YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// // This URL is where your Node.js backend will be running.\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [tokenData, setTokenData] = useState(null);\n\n//   // A component to handle the Clever callback route\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n//       const state = urlParams.get(\"state\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for token exchange\n//         // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//         //   method: \"POST\",\n//         //   headers: { \"Content-Type\": \"application/json\" },\n//         //   body: JSON.stringify({ code }),\n//         // })\n//         //   .then((response) => response.json())\n//         //   .then((data) => {\n//         //     console.log(\n//         //       \"Access token received from backend:\",\n//         //       data.accessToken\n//         //     );\n//         //     setIsLoggedIn(true);\n//         //     setTokenData(data);\n//         //     // Optional: Redirect the user away from the callback URL\n//         //     window.history.pushState({}, \"\", \"/\");\n//         //   })\n//         //   .catch((error) => {\n//         //     console.error(\"Error exchanging code:\", error);\n//         //   });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   // Step 1: The login button that redirects to Clever's auth page\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLEVER_CLIENT_ID,\n//       scope: \"read:students\", // Adjust the scope as needed\n//       state: Math.random().toString(36).substring(2, 15), // A simple state value for demo\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   // Conditional rendering based on the current URL\n//   if (window.location.pathname === \"/clever/callback\") {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n// import React, { useEffect, useState } from \"react\";\n\n// // Use the client ID from your dashboard.\n// const YOUR_CLIENT_ID = \"14b03a5dcb58a775e19c\";\n\n// // WARNING: This redirect URI must be an exact match to what is in your Clever dashboard.\n// // If your dashboard is set to \"http://localhost:3000/clever/callback\", this will fail.\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// function App() {\n//   const [authCode, setAuthCode] = useState(null);\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n\n//     if (code) {\n//       console.log(\"Received authorization code:\", code);\n//       setAuthCode(code);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n//     const params = new URLSearchParams({\n//       response_type: \"code\",\n//       redirect_uri: YOUR_REDIRECT_URI,\n//       client_id: YOUR_CLIENT_ID,\n//       scope: \"read:students\",\n//       state: Math.random().toString(36).substring(2, 15),\n//     });\n//     window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n//   };\n\n//   if (authCode) {\n//     return (\n//       <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//         <h2>Successfully received authorization code!</h2>\n//         <p>\n//           Your authorization code is: <code>{authCode}</code>\n//         </p>\n//         <p>\n//           This code must now be sent to a **secure backend** to get an access\n//           token. Without a backend, you cannot complete the login process or\n//           access Clever's data.\n//         </p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Redirect Example</h1>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n\n// data- 19-08-2025\n\n// import React, { useEffect, useState } from \"react\";\n\n// // YOUR CLEVER APPLICATION DETAILS\n// // Note: These are public facing and safe to keep in the front-end\n// const YOUR_CLIENT_ID = \"745ce0e4a98fe44a0b1e\";\n// const YOUR_REDIRECT_URI = \"http://localhost:3000\";\n\n// // YOUR BACKEND SERVER URL\n// const YOUR_BACKEND_URL = \"http://localhost:5000\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [userData, setUserData] = useState(null);\n\n//   // Checks if the URL has the 'code' parameter from Clever's redirect\n//   const isCleverCallback = () => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     return urlParams.has(\"code\");\n//   };\n\n//   const CleverCallback = () => {\n//     useEffect(() => {\n//       const urlParams = new URLSearchParams(window.location.search);\n//       const code = urlParams.get(\"code\");\n\n//       if (code) {\n//         console.log(\"Received authorization code:\", code);\n//         // Step 2: Send the code to your backend for a secure token exchange\n//         fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ code }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log(\"User data received from backend:\", data);\n//             setIsLoggedIn(true);\n//             setUserData(data);\n//             // Clean the URL to remove the code parameter\n//             window.history.pushState({}, \"\", \"/\");\n//           })\n//           .catch((error) => {\n//             console.error(\"Error exchanging code:\", error);\n//           });\n//       }\n//     }, []);\n\n//     return <div>Processing Clever login...</div>;\n//   };\n\n//   const handleLogin = () => {\n//     // This URL will redirect the user to your district's specific login page\n//     // window.location.href = \"https://clever.com/in/placid-calculator-8114\";\n//     // window.location.href = \"https://clever.com/in/fabulous-protractor-6282\";\n//     window.location.href =\n//       \"https://clever.com/oauth/authorize?response_type=code&redirect_uri=http://localhost:3000&client_id=14b03a5dcb58a775e19c\";\n//   };\n\n//   // Conditional rendering based on whether the URL contains a callback code\n//   if (isCleverCallback()) {\n//     return <CleverCallback />;\n//   }\n\n//   return (\n//     <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n//       <h1>Clever Login Example</h1>\n//       {!isLoggedIn ? (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       ) : (\n//         <div>\n//           <h2>Successfully logged in!</h2>\n//           <pre>{JSON.stringify(userData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//\n\n// 62bca20aeae1a2c3432128b2\n\nimport React, { useEffect } from \"react\";\n\nfunction App() {\n  const clientId = \"745ce0e4a98fe44a0b1e\"; // your Clever client ID\n  const redirectUri = \"http://localhost:3000\"; // must match Clever dashboard\n  const backendApi = \"http://localhost:8000/api/auth/clever\";\n  // 👆 change to production API when Laravel is deployed\n\n  const handleLogin = () => {\n    // Standard OAuth login URL (credential login)\n    window.location.href = `https://clever.com/oauth/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}`;\n  };\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get(\"code\");\n\n    if (code) {\n      console.log(\"Clever returned code:\", code);\n\n      // Send code to backend\n      fetch(backendApi, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ code }),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(\"Backend response:\", data);\n          if (data.user) {\n            alert(`Logged in as: ${JSON.stringify(data.user.data)}`);\n          }\n        })\n        .catch((err) => console.error(\"Error sending code to backend:\", err));\n    }\n  }, []);\n\n  return (\n    <div className=\"flex items-center justify-center h-screen bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500\">\n      <div className=\"bg-white p-10 rounded-3xl shadow-2xl flex flex-col items-center space-y-6\">\n        <h1 className=\"text-2xl font-bold text-gray-800\">Welcome to My App</h1>\n        <p className=\"text-gray-500 text-center\">\n          Sign in with your Clever account to continue\n        </p>\n        <button\n          onClick={handleLogin}\n          className=\"bg-blue-600 text-white px-8 py-3 rounded-full shadow-md hover:bg-blue-700 hover:scale-105 transition transform duration-200 ease-in-out flex items-center space-x-2\"\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"white\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth={1.5}\n            stroke=\"currentColor\"\n            className=\"w-6 h-6\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M12 6v12m6-6H6\"\n            />\n          </svg>\n          <span>Login with Clever</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAG,sBAAsB,CAAC,CAAC;EACzC,MAAMC,WAAW,GAAG,uBAAuB,CAAC,CAAC;EAC7C,MAAMC,UAAU,GAAG,uCAAuC;EAC1D;;EAEA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,mEAAmEN,QAAQ,iBAAiBC,WAAW,EAAE;EAClI,CAAC;EAEDN,SAAS,CAAC,MAAM;IACd,MAAMY,MAAM,GAAG,IAAIC,eAAe,CAACJ,MAAM,CAACC,QAAQ,CAACI,MAAM,CAAC;IAC1D,MAAMC,IAAI,GAAGH,MAAM,CAACI,GAAG,CAAC,MAAM,CAAC;IAE/B,IAAID,IAAI,EAAE;MACRE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,IAAI,CAAC;;MAE1C;MACAI,KAAK,CAACZ,UAAU,EAAE;QAChBa,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET;QAAK,CAAC;MAC/B,CAAC,CAAC,CACCU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;QACdX,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEU,IAAI,CAAC;QACtC,IAAIA,IAAI,CAACC,IAAI,EAAE;UACbC,KAAK,CAAC,iBAAiBP,IAAI,CAACC,SAAS,CAACI,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC,EAAE,CAAC;QAC1D;MACF,CAAC,CAAC,CACDG,KAAK,CAAEC,GAAG,IAAKf,OAAO,CAACgB,KAAK,CAAC,gCAAgC,EAAED,GAAG,CAAC,CAAC;IACzE;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE9B,OAAA;IAAKgC,SAAS,EAAC,uGAAuG;IAAAC,QAAA,eACpHjC,OAAA;MAAKgC,SAAS,EAAC,2EAA2E;MAAAC,QAAA,gBACxFjC,OAAA;QAAIgC,SAAS,EAAC,kCAAkC;QAAAC,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvErC,OAAA;QAAGgC,SAAS,EAAC,2BAA2B;QAAAC,QAAA,EAAC;MAEzC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJrC,OAAA;QACEsC,OAAO,EAAEhC,WAAY;QACrB0B,SAAS,EAAC,qKAAqK;QAAAC,QAAA,gBAE/KjC,OAAA;UACEuC,KAAK,EAAC,4BAA4B;UAClCC,IAAI,EAAC,OAAO;UACZC,OAAO,EAAC,WAAW;UACnBC,WAAW,EAAE,GAAI;UACjBC,MAAM,EAAC,cAAc;UACrBX,SAAS,EAAC,SAAS;UAAAC,QAAA,eAEnBjC,OAAA;YACE4C,aAAa,EAAC,OAAO;YACrBC,cAAc,EAAC,OAAO;YACtBC,CAAC,EAAC;UAAgB;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNrC,OAAA;UAAAiC,QAAA,EAAM;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnC,EAAA,CAnEQD,GAAG;AAAA8C,EAAA,GAAH9C,GAAG;AAqEZ,eAAeA,GAAG;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js\",\n  _s2 = $RefreshSig$();\n// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n//code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\nconst YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// This URL is where your Node.js backend will be running.\nconst YOUR_BACKEND_URL = \"http://localhost:5000\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [tokenData, setTokenData] = useState(null);\n\n  // A component to handle the Clever callback route\n  const CleverCallback = () => {\n    _s();\n    useEffect(() => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n      const state = urlParams.get(\"state\");\n      if (code) {\n        console.log(\"Received authorization code:\", code);\n        // Step 2: Send the code to your backend for token exchange\n        // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n        //   method: \"POST\",\n        //   headers: { \"Content-Type\": \"application/json\" },\n        //   body: JSON.stringify({ code }),\n        // })\n        //   .then((response) => response.json())\n        //   .then((data) => {\n        //     console.log(\n        //       \"Access token received from backend:\",\n        //       data.accessToken\n        //     );\n        //     setIsLoggedIn(true);\n        //     setTokenData(data);\n        //     // Optional: Redirect the user away from the callback URL\n        //     window.history.pushState({}, \"\", \"/\");\n        //   })\n        //   .catch((error) => {\n        //     console.error(\"Error exchanging code:\", error);\n        //   });\n      }\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Processing Clever login...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Step 1: The login button that redirects to Clever's auth page\n  _s(CleverCallback, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const handleLogin = () => {\n    const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n    const params = new URLSearchParams({\n      response_type: \"code\",\n      redirect_uri: YOUR_REDIRECT_URI,\n      client_id: YOUR_CLEVER_CLIENT_ID,\n      scope: \"read:students\",\n      // Adjust the scope as needed\n      state: Math.random().toString(36).substring(2, 15) // A simple state value for demo\n    });\n    window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n  };\n\n  // Conditional rendering based on the current URL\n  if (window.location.pathname === \"/clever/callback\") {\n    return /*#__PURE__*/_jsxDEV(CleverCallback, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Clever Login Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), !isLoggedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Clever\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Successfully logged in!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(tokenData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"lUTS8tuQgjf954jBh5rQ12Cr25k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","YOUR_CLEVER_CLIENT_ID","YOUR_REDIRECT_URI","YOUR_BACKEND_URL","App","_s2","_s","$RefreshSig$","isLoggedIn","setIsLoggedIn","tokenData","setTokenData","CleverCallback","urlParams","URLSearchParams","window","location","search","code","get","state","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","handleLogin","cleverAuthUrl","params","response_type","redirect_uri","client_id","scope","Math","random","toString","substring","href","pathname","style","padding","fontFamily","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/rajanmalakar/Downloads/tempFile/clever/my-clever-app/src/App.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const error = urlParams.get(\"error\");\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//     } else if (error) {\n//       console.error(\"OAuth Error:\", error);\n//     }\n//   }, []);\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       <button onClick={handleLogin}>Login with Clever</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n//code comented\n// import React, { useEffect, useState } from \"react\";\n\n// const clientId = \"14b03a5dcb58a775e19c\";\n// const redirectUri = \"http://localhost:3000\"; // Make sure it's EXACTLY this in Clever dashboard\n// const cleverAuthUrl = `https://clever.com/oauth/authorize?response_type=code&redirect_uri=${encodeURIComponent(\n//   redirectUri\n// )}&client_id=${clientId}`;\n\n// function App() {\n//   const [studentData, setStudentData] = useState(null); // State to store student data\n//   const [loading, setLoading] = useState(false); // State for loading indicator\n//   const [error, setError] = useState(null); // State for errors\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const code = urlParams.get(\"code\");\n//     const cleverError = urlParams.get(\"error\"); // Rename to avoid conflict with local error state\n\n//     if (code) {\n//       console.log(\"Clever OAuth Code:\", code);\n//       // Now, send this code to your backend to exchange it for an access token and fetch user data\n//       // fetchStudentData(code);\n\n//       // Clean up the URL to remove the code parameter (optional, but good practice)\n//       const newUrl = new URL(window.location.href);\n//       newUrl.searchParams.delete(\"code\");\n//       window.history.replaceState({}, document.title, newUrl.toString());\n//     } else if (cleverError) {\n//       console.error(\"OAuth Error from Clever:\", cleverError);\n//       setError(`Clever Login Error: ${cleverError}`);\n//     }\n//   }, []); // Empty dependency array means this runs once on mount\n\n//   const fetchStudentData = async (code) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       // Make a request to your backend endpoint (e.g., /api/clever-callback)\n//       // This endpoint on your server will handle the token exchange and data fetching\n//       const response = await fetch(\n//         `http://localhost:3001/api/clever-callback?code=${code}`\n//       ); // Assuming your backend runs on port 3001\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(\n//           errorData.message || \"Failed to fetch student data from backend\"\n//         );\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Student Data from Backend:\", data);\n//       setStudentData(data.userData); // Assuming your backend sends data in { userData: ... }\n//     } catch (err) {\n//       console.error(\"Error fetching student data:\", err);\n//       setError(`Error getting student data: ${err.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     window.location.href = cleverAuthUrl;\n//   };\n\n//   return (\n//     <div style={{ padding: 40 }}>\n//       <h2>Clever Login Integration</h2>\n//       {!studentData && !loading && !error && (\n//         <button onClick={handleLogin}>Login with Clever</button>\n//       )}\n\n//       {loading && <p>Loading student data...</p>}\n\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {studentData && (\n//         <div>\n//           <h3>\n//             Welcome, {studentData.name.first} {studentData.name.last}!\n//           </h3>\n//           <p>Role: {studentData.roles[0]}</p>\n//           <p>Clever ID: {studentData.id}</p>\n//           {/* You can display more student data here based on what Clever's /me endpoint returns */}\n//           {studentData.student_number && (\n//             <p>Student Number: {studentData.student_number}</p>\n//           )}\n//           {studentData.school && <p>School ID: {studentData.school}</p>}{\" \"}\n//           {/* Note: This is usually just the ID, you'd need another API call to get full school details if needed */}\n//           <p>\n//             <pre>{JSON.stringify(studentData, null, 2)}</pre>{\" \"}\n//             {/* Display raw data for debugging */}\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n//\n\n//\n\nimport React, { useEffect, useState } from \"react\";\n\nconst YOUR_CLEVER_CLIENT_ID = \"14b03a5dcb58a775e19c\";\nconst YOUR_REDIRECT_URI = \"http://localhost:3000/clever/callback\";\n\n// This URL is where your Node.js backend will be running.\nconst YOUR_BACKEND_URL = \"http://localhost:5000\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [tokenData, setTokenData] = useState(null);\n\n  // A component to handle the Clever callback route\n  const CleverCallback = () => {\n    useEffect(() => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n      const state = urlParams.get(\"state\");\n\n      if (code) {\n        console.log(\"Received authorization code:\", code);\n        // Step 2: Send the code to your backend for token exchange\n        // fetch(`${YOUR_BACKEND_URL}/api/clever/token`, {\n        //   method: \"POST\",\n        //   headers: { \"Content-Type\": \"application/json\" },\n        //   body: JSON.stringify({ code }),\n        // })\n        //   .then((response) => response.json())\n        //   .then((data) => {\n        //     console.log(\n        //       \"Access token received from backend:\",\n        //       data.accessToken\n        //     );\n        //     setIsLoggedIn(true);\n        //     setTokenData(data);\n        //     // Optional: Redirect the user away from the callback URL\n        //     window.history.pushState({}, \"\", \"/\");\n        //   })\n        //   .catch((error) => {\n        //     console.error(\"Error exchanging code:\", error);\n        //   });\n      }\n    }, []);\n\n    return <div>Processing Clever login...</div>;\n  };\n\n  // Step 1: The login button that redirects to Clever's auth page\n  const handleLogin = () => {\n    const cleverAuthUrl = \"https://clever.com/oauth/authorize\";\n    const params = new URLSearchParams({\n      response_type: \"code\",\n      redirect_uri: YOUR_REDIRECT_URI,\n      client_id: YOUR_CLEVER_CLIENT_ID,\n      scope: \"read:students\", // Adjust the scope as needed\n      state: Math.random().toString(36).substring(2, 15), // A simple state value for demo\n    });\n    window.location.href = `${cleverAuthUrl}?${params.toString()}`;\n  };\n\n  // Conditional rendering based on the current URL\n  if (window.location.pathname === \"/clever/callback\") {\n    return <CleverCallback />;\n  }\n\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n      <h1>Clever Login Example</h1>\n      {!isLoggedIn ? (\n        <button onClick={handleLogin}>Login with Clever</button>\n      ) : (\n        <div>\n          <h2>Successfully logged in!</h2>\n          <pre>{JSON.stringify(tokenData, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,qBAAqB,GAAG,sBAAsB;AACpD,MAAMC,iBAAiB,GAAG,uCAAuC;;AAEjE;AACA,MAAMC,gBAAgB,GAAG,uBAAuB;AAEhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMc,cAAc,GAAGA,CAAA,KAAM;IAAAN,EAAA;IAC3BT,SAAS,CAAC,MAAM;MACd,MAAMgB,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;MAC7D,MAAMC,IAAI,GAAGL,SAAS,CAACM,GAAG,CAAC,MAAM,CAAC;MAClC,MAAMC,KAAK,GAAGP,SAAS,CAACM,GAAG,CAAC,OAAO,CAAC;MAEpC,IAAID,IAAI,EAAE;QACRG,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEJ,IAAI,CAAC;QACjD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF;IACF,CAAC,EAAE,EAAE,CAAC;IAEN,oBAAOlB,OAAA;MAAAuB,QAAA,EAAK;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9C,CAAC;;EAED;EAAArB,EAAA,CAlCMM,cAAc;EAmCpB,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,aAAa,GAAG,oCAAoC;IAC1D,MAAMC,MAAM,GAAG,IAAIhB,eAAe,CAAC;MACjCiB,aAAa,EAAE,MAAM;MACrBC,YAAY,EAAE9B,iBAAiB;MAC/B+B,SAAS,EAAEhC,qBAAqB;MAChCiC,KAAK,EAAE,eAAe;MAAE;MACxBd,KAAK,EAAEe,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE;IACtD,CAAC,CAAC;IACFvB,MAAM,CAACC,QAAQ,CAACuB,IAAI,GAAG,GAAGV,aAAa,IAAIC,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE;EAChE,CAAC;;EAED;EACA,IAAItB,MAAM,CAACC,QAAQ,CAACwB,QAAQ,KAAK,kBAAkB,EAAE;IACnD,oBAAOxC,OAAA,CAACY,cAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3B;EAEA,oBACE3B,OAAA;IAAKyC,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAa,CAAE;IAAApB,QAAA,gBACxDvB,OAAA;MAAAuB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5B,CAACnB,UAAU,gBACVR,OAAA;MAAQ4C,OAAO,EAAEhB,WAAY;MAAAL,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAExD3B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChC3B,OAAA;QAAAuB,QAAA,EAAMsB,IAAI,CAACC,SAAS,CAACpC,SAAS,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACtB,GAAA,CAtEQD,GAAG;AAAA2C,EAAA,GAAH3C,GAAG;AAwEZ,eAAeA,GAAG;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}